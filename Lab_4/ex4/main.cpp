//Лабораторная работа 4.
//Использование ассемблерных вставок в программах на C++
// ЗАДАНИЕ 4.
/*
    Придумайте и запишите в отчёте:
    - маску (т.е. второй операнд бинарной побитовой операции) для
преобразования кодов ASCII цифр ’0’...’9’ в их двоичные эквиваленты
(однобайтовые числа 0...9) с помощью операции AND. При этом ASCII­-код
нуля (шестнадцатеричное число 0x30, однако наиболее предпочтительное и
самодокументирующееся представление ASCII-кода нуля — ’0’) должен быть
преобразован в однобайтовое число 00, ASCII-код единицы
(’1’, шестнадцатеричное число 0x31) — в 01, и т. д.;
    - необходимую операцию и маску для преобразования однобайтовых чисел
0...9 в их коды ASCII;
    - маску, которая преобразовывает строчные английские буквы в прописные
и наоборот с помощью операции XOR.
    Реализуйте преобразования ASCII-кодов цифр в значения и обратно как
ассемблерную вставку в программу на C++.

Platform: Linux Ubuntu 16.04.3 LTS x86_64
Compiler: GNU GCC 7.2.0
*/

#include <iostream>

using namespace std;

int main()
{
    cout<< "1. ASCII-код цифры в её значение\n"
           "2. Значение цифры в её ASCII-код\n"
           "3. Строчную английскую букву в прописную и наоборот\n"
           "Введите номер нужного пункта меню: ";
    int x=0;
    cin >> x;
    switch (x)
    {
    case 1:
    {
        cout<< "Введите цифру (она будет считана как символ): ";
        char ch, bt;
        cin >> ch;
        __asm__ __volatile__ (
                    "mov %[ch], %[bt]\n"
                    "and $0x0F, %[bt]\n" // Маска: 0000_1111
                    :[bt] "+rm" (bt)
                    :[ch] "rm" (ch)
                    :"cc"
                );
        cout << "Число: " << (int)bt << endl;
        break;
    }
    case 2:
    {
        cout<< "Введите цифру (она будет считана как число): ";
        char ch, bt;
        unsigned int num;
        cin >> num;
        bt = num;
        __asm__ __volatile__ (
                    "mov %[bt], %[ch]\n"
                    "or $0x30, %[ch]\n" // Маска: 0011_0000; Операция: OR
                    :[ch] "+rm" (ch)
                    :[bt] "rm" (bt)
                    :"cc"
                );
        cout << "Символ: " << ch << endl;
        break;
    }
    case 3:
    {
        cout<< "Введите английскую букву: ";
        char ch1, ch2;
        cin >> ch1;
        __asm__ __volatile__ (
                    "mov %[ch1], %[ch2]\n"
                    "xor $0x20, %[ch2]\n" // Маска: 0010_0000
                    :[ch2] "+rm" (ch2)
                    :[ch1] "rm" (ch1)
                    :"cc"
                );
        cout << "Буква после преобразования: " << ch2 << endl;
        break;
    }
    default:
        cout<< "Нет такого пункта меню\n";
    }
    return 0;
}
